temp= data.frame()
ls=matrix(rep(NA,6*100),nrow=100) # roughly nrow = 3x4x2
for (p in 1:9)# p=0:8
{
for(q in 1:9)# q=0:8
{
for(d in 0:1)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.exxon,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
######################## Check for different combinations ########
i=1
temp= data.frame()
ls=matrix(rep(NA,6*64),nrow=64) # roughly nrow = 3x4x2
for (p in 1:6)
{
for(q in 1:6)
{
for(d in 0:1)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.exxon,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
######################## Check for different combinations ########
i=1
temp= data.frame()
ls=matrix(rep(NA,6*32),nrow=32) # roughly nrow = 6x6x2
for (p in 1:6)
{
for(q in 1:6)
{
for(d in c(1))#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.exxon,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
temp[which.min(temp$AIC),] #1,0,1
temp[which.min(temp$BIC),] #1,0,1
temp[which.min(temp$AICc),] #1,0,1
sarima(log.exxon, 3,1,4)
# Fit
arima1=arima(log.exxon,order=c(3,1,4)
summary(arima1)
# Fit
arima1=arima(log.exxon,order=c(3,1,4))
summary(arima1)
# Fit
arima1=arima(log.exxon,order=c(0,1,0))
summary(arima1)
# Fit
arima1=arima(log.exxon,order=c(3,1,4))
summary(arima1)
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
temp[which.min(temp$AIC),] #1,0,1
temp[which.min(temp$BIC),] #1,0,1
temp[which.min(temp$AICc),] #1,0,1
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
pacf.squared1=pacf(squared.res.arima1,main='PACF Squared Residuals')
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
acf.squared1=acf(squared.res.arima1,main='ACF Squared Residuals')
pacf.squared1=pacf(squared.res.arima1,main='PACF Squared Residuals')
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in seq(0.1, 2.5, by=0.1)) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 0.1:3) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 0:3) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:3) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
which(ARCH_AIC == min(ARCH_AIC))
garch(res.arima1,order=c(0,0.5),trace=F)
garch(res.arima1,order=c(0,.1),trace=F)
garch(res.arima1,order=c(0,.3),trace=F)
garch(res.arima1,order=c(0,.4),trace=F)
garch(res.arima1,order=c(0,.5),trace=F)
auto.arima(log.exxon)
auto.arima(log.exxon)
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
acf.squared1=acf(squared.res.arima1,main='ACF Squared Residuals')
pacf.squared1=pacf(squared.res.arima1,main='PACF Squared Residuals')
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
acf.squared1=ggAcf(squared.res.arima1,main='ACF Squared Residuals')
pacf.squared1=ggPacf(squared.res.arima1,main='PACF Squared Residuals')
# Fit
arima1=arima(log.exxon,order=c(2,1,4))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
ggAcf(squared.res.arima1,main='ACF Squared Residuals')
ggPacf(squared.res.arima1,main='PACF Squared Residuals')
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
which(ARCH_AIC == min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
which(ARCH_AIC == min(ARCH_AIC))
min(ARCH_AIC)
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
which(ARCH_AIC == min(ARCH_AIC))
cat("MIN AIC: ", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order: ", which(ARCH_AIC == min(ARCH_AIC)))
cat("MIN AIC: ", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order: ", which(ARCH_AIC == min(ARCH_AIC)))
cat("")
cat("MIN AIC: ", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order: ", which(ARCH_AIC == min(ARCH_AIC)))
cat("/n")
cat("MIN AIC: ", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order: ", which(ARCH_AIC == min(ARCH_AIC)))
<br>
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order: ", which(ARCH_AIC == min(ARCH_AIC)))
cat("MIN AIC: ", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order: ", which(ARCH_AIC == min(ARCH_AIC)))
cat(" ")
cat("MIN AIC: ", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order:", which(ARCH_AIC == min(ARCH_AIC)))
cat(" ")
cat("MIN AIC:", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order:", which(ARCH_AIC == min(ARCH_AIC)))
x=0
cat("MIN AIC:", min(ARCH_AIC))
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order:", which(ARCH_AIC == min(ARCH_AIC)))
cat(" ")
cat("MIN AIC:", min(ARCH_AIC))
summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
summary(arch10)
#summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
summary(arch10)
#summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
arch10_results = summary(arch10)
#summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
arch10_results = summary(arch10)
arch10_results$l.b.test
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:24) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order:", which(ARCH_AIC == min(ARCH_AIC)))
cat(" ")
cat("MIN AIC:", min(ARCH_AIC))
acf(ne_returns^2, na.action = na.pass)
pacf(ne_returns^2, na.action=na.pass)
ts.nee %>% ggtsdisplay()
adf.test(ts.nee)
log.nee <- log(ts.nee)
log.exxon %>% ggtsdisplay()
adf.test(log.exxon)
log.nee <- log(ts.nee)
log.nee %>% ggtsdisplay()
adf.test(log.nee)
log.nee <- log(ts.nee)
log.nee %>% diff() %>% ggtsdisplay()
adf.test(log.nee)
auto.arima(ts.nee)
######################## Check for different combinations ########
i=1
temp= data.frame()
ls=matrix(rep(NA,6*98),nrow=98) # roughly nrow = 6x6x2
for (p in 1:7)
{
for(q in 1:7)
{
for(d in 0:1)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.nee,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
######################## Check for different combinations ########
i=1
temp= data.frame()
ls=matrix(rep(NA,6*98),nrow=98) # roughly nrow = 6x6x2
for (p in 1:7)
{
for(q in 1:7)
{
for(d in 0:1)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.nee,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
head(knitr::kable(temp))
View(temp)
######################## Check for different combinations ########
i=1
temp= data.frame()
ls=matrix(rep(NA,6*98),nrow=98) # roughly nrow = 6x6x2
for (p in 1:7)
{
for(q in 1:7)
{
for(d in 0:1)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.nee,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
head(temp)
######################## Check for different combinations ########
i=1
temp= data.frame()
ls=matrix(rep(NA,6*98),nrow=98) # roughly nrow = 6x6x2
for (p in 1:7)
{
for(q in 1:7)
{
for(d in 0:1)#
{
if(p-1+d+q-1<=8)
{
model<- Arima(log.nee,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(head(temp))
temp[which.min(temp$AIC),] #1,0,1
temp[which.min(temp$BIC),] #1,0,1
temp[which.min(temp$AICc),] #1,0,1
# Fit
arima1=arima(log.nee,order=c(3,0,3))
summary(arima1)
res.arima1=arima1$res
squared.res.arima1=res.arima1^2
plot(squared.res.arima1,main='Squared Residuals')
ggAcf(squared.res.arima1,main='ACF Squared Residuals')
ggPacf(squared.res.arima1,main='PACF Squared Residuals')
# seq(0.1, 2.5, by=0.1)
# FIT ARCH models
ARCH <- list() ## set counter
cc <- 1
for (p in 1:12) {
ARCH[[cc]] <- garch(res.arima1,order=c(0,p),trace=F)
cc <- cc + 1
}
## get AIC values for model evaluation
ARCH_AIC <- sapply(ARCH, AIC) ## model with lowest AIC is the best
cat("Optimal ARCH order:", which(ARCH_AIC == min(ARCH_AIC)))
cat("MIN AIC:", min(ARCH_AIC))
#summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
arch10_results = summary(arch10)
arch10_results$l.b.test
#summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
arch10_results = summary(arch10)
arch10_results
arch10_results$l.b.test
#summary(arima1)
arch10=garch(res.arima1,order=c(0,10),trace=F)
arch10_results = summary(arch10)
arch10_results$l.b.test
#summary(arima1)
arch8=garch(res.arima1,order=c(0,8),trace=F)
arch8_results = summary(arch8)
arch8_results$l.b.test
summary(arima1)
summary(arch8_results)
summary(arima1)
#summary(arch8_results)
#summary(arima1)
summary(arch8_results)
#summary(arima1)
arch8_results
